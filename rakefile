require 'rubygems'
require 'bundler/setup'
require 'zip/zip'
require 'version/version_task'
require 'version'

#############################################
# Utility methods
#############################################

def get_classes(path)
	Dir.chdir(path) do
		FileList["**/*.as"].pathmap("%X").map do |f|
			f.gsub(/^\.\//, '').gsub(/[\/\\]/, '.')
		end
	end
end

def run(command, abort_on_failure = true)
	command = command.gsub('/', '\\') if is_windows?
	output = ""

	#sh command
	puts "> #{command}"
	IO.popen("#{command} 2>&1") do |proc|
		while !proc.closed? && (line = proc.gets)
			puts ">    #{line}"
			output << line
			yield line if block_given?
		end
	end

	if $?.exitstatus != 0
		msg = "Operation exited with status #{$?.exitstatus}"
		if abort_on_failure
			abort msg
		else
			puts msg
		end	
	end
	#log $?.exitstatus

	return output
end

def current_version
	Version.current(File.join(Rake.original_dir, CONFIG[:version_file])) || "0.0.0"
end

def is_windows?
	require 'rbconfig'
	RbConfig::CONFIG['host_os'] =~ /mswin|mingw/
end

#############################################
# Config
#############################################

CONFIG = {
	:license_src => "../../LICENSE",
	:license_dest => "license.txt",
	:version_file => ".version"
}

#create constants so it's quicker to get project settings
BIN = PROJECT[:bin_dir]
SRC = PROJECT[:src_dir]
SWC = File.join(BIN, "#{PROJECT[:name]}.swc")
SWC_VERSIONED = File.join(BIN, "#{PROJECT[:name]}-#{current_version}.swc")
ZIP = File.join(BIN, "#{PROJECT[:name]}-#{current_version}.zip")

#############################################
# Tasks
#############################################

task :default => :build

desc "Compile the swc"
task :build => SWC

desc "Package the project into a zip"
task :package => ZIP

directory BIN

file SWC => FileList[BIN, File.join(SRC,"**","*.as")] do
	run "#{COMPC} -load-config+=compc_config.xml -output #{SWC}"
end

file CONFIG[:version_file] do
	Rake::Task["version:create"].execute
	#abort "rake aborted!\nVersion file missing and had to be created"
end

file SWC_VERSIONED => [BIN, SWC, CONFIG[:version_file]] do
	cp SWC, SWC_VERSIONED
end

file ZIP => [BIN, SWC, CONFIG[:version_file], SWC_VERSIONED] do
	rm ZIP rescue nil

	filename = "#{PROJECT[:name]}-#{current_version}.swc"

	Zip::ZipFile.open(ZIP, Zip::ZipFile::CREATE) do |zip|
		zip.add(CONFIG[:license_dest], CONFIG[:license_src])
		zip.add(filename, SWC_VERSIONED)
	end

	puts "zip #{ZIP}"
end

desc "Remove package results & temporary build artifacts"
task :clean do
	list = FileList.new
	list.include(File.join(BIN, "*.swc"));
	list.include(File.join(BIN, "*.zip"));
	list.exclude(SWC)
	list.each { |fn| rm_r fn rescue nil }
end

desc "Remove all build & package results"
task :clobber => [:clean] do
	list = FileList.new
	list.include(SWC)
	list.each { |fn| rm_r fn rescue nil }
end

Rake::VersionTask.new do |task|
	task.with_git = false
	task.with_hg = false
	task.filename = CONFIG[:version_file]
end

#desc 'Run the unit tests against src'
task :test do

	puts "TEST NOT YET IMPLEMENTED"

end

#############################################
# Find Flex SDK
#############################################

[
	ENV['FLEX_HOME'],
	'C:\develop\sdk\flex_sdk_4.6.0.23201',
	'C:\develop\sdk\flex_sdk_4.5.1.21328'
].each do |path|
	if path != nil && File.exists?(path)
		FLEX_HOME = path
		MXMLC = File.join(FLEX_HOME, 'bin', 'mxmlc')
		COMPC = File.join(FLEX_HOME, 'bin', 'compc')
		ASDOC = File.join(FLEX_HOME, 'bin', 'asdoc')
		break
	end
end

if FLEX_HOME != nil
	puts "Using Flex SDK at #{FLEX_HOME}"
else
	puts "\nrake aborted!"
	puts "Could not find Flex SDK"
	exit
end