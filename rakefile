require 'yaml'
require 'zip/zip'
require 'rake/version_task'
require 'version'

#############################################
# Utility methods
#############################################

def get_all_classes(path)
	Dir.chdir(path) do
		FileList["**/*.as"].pathmap('%d/%n').map do |f|
			f.gsub(/^\.\//, '').gsub('/', '.')
		end
	end
end

def run(command)
	#puts "> Running shell command"
	
	if is_windows?
		sh command.gsub('/', '\\')
	else
		sh command
	end

	#puts "<\n"
end

def get_version
	Version.current(File.join(Rake.original_dir, CONFIG[:version_file]))
end

def is_windows?
	require 'rbconfig'
	RbConfig::CONFIG['host_os'] =~ /mswin|mingw/
end

#############################################
# Find Flex SDK
#############################################

[
	ENV['FLEX_HOME'],
	'C:\develop\sdk\flex_sdk_4.6.0.23201',
	'C:\develop\sdk\flex_sdk_4.5.1.21328'
].each do |path|
	if path != nil && File.exists?(path)
		FLEX_HOME = path
		MXMLC = File.join(FLEX_HOME, 'bin', 'mxmlc')
		COMPC = File.join(FLEX_HOME, 'bin', 'compc')
		ASDOC = File.join(FLEX_HOME, 'bin', 'asdoc')
		break
	end
end

if FLEX_HOME != nil
	puts "Using Flex SDK at #{FLEX_HOME}"
else
	puts "\nrake aborted!"
	puts "Could not find Flex SDK"
	exit
end

#############################################
# Config
#############################################

CONFIG = {
	:license_src => "../../LICENSE",
	:license_dest => "license.txt",
	:version_file => ".version"
}

BIN = PROJECT[:bin_dir]
SRC = PROJECT[:src_dir]
SWC = File.join(BIN, "#{PROJECT[:name]}.swc")
SWC_VERSIONED = File.join(BIN, "#{PROJECT[:name]}-#{get_version}.swc")
ZIP = File.join(BIN, "#{PROJECT[:name]}-#{get_version}.zip")

#############################################
# Rules
#############################################

#rule '.as'

#############################################
# Tasks
#############################################

desc "Compile the swc if it is out of date"
task :default => SWC

directory BIN

file SWC => FileList[BIN, File.join(SRC,"**","*.as")] do
	Rake::Task["build"].execute
end

file SWC_VERSIONED => [BIN, SWC, CONFIG[:version_file]] do
	cp SWC, SWC_VERSIONED
end

file ZIP => FileList[BIN, SWC, SWC_VERSIONED] do
	rm ZIP rescue nil

	filename = "#{PROJECT[:name]}-#{get_version}.swc"

	Zip::ZipFile.open(ZIP, Zip::ZipFile::CREATE) do |zip|
		zip.add(CONFIG[:license_dest], CONFIG[:license_src])
		zip.add(filename, SWC_VERSIONED)
	end

	puts "zip #{ZIP}"
end

desc "Compile the swc"
task :build => BIN do
	run "#{COMPC} -load-config+=compc_config.xml -output #{SWC}"
end

desc "Package the project into a zip if it is out of date"
task :package => ZIP

desc "Remove the results of package"
task :clean do
	rm FileList[File.join(BIN, "*.swc")].exclude(SWC) rescue nil
	rm FileList[File.join(BIN, "*.zip")] rescue nil
end

desc "Remove the results of build & package"
task :clobber => [:clean] do
	rm SWC rescue nil
end

Rake::VersionTask.new do |task|
	task.with_git = false
	#task.with_hg = false
	task.filename = CONFIG[:version_file]
end

desc 'Run the unit tests against src'
task :test do

	puts "NOT YET IMPLEMENTED"

end